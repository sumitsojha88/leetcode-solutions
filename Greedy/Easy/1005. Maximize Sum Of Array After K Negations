

Input: A = [4,2,3], K = 1
Output: 5
Explanation: Choose indices (1,) and A becomes [4,-2,3].

Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].

Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].



class Solution {
public:
    int largestSumAfterKNegations(vector<int>& A, int K) {
            
            
           priority_queue<int,vector<int>,greater<int>> pq(A.begin(),A.end()); // make min heap so minimum element is present on the top 
           while(K--)
           {
                   int temp = pq.top();       // pop minimum element from top 
                   pq.pop();
                   
                   pq.push(temp*(-1));           // multiple it by -1 and push again in heap
           }
            int sum = 0;
            while(pq.size())
            {
                    sum += pq.top();        // simple pop and do sum
                    pq.pop();
            }
            
            
            return sum;
            
           
       
          }
};
