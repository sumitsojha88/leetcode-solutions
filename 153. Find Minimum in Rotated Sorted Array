// simple solution 
class Solution {
public:
    int findMin(vector<int>& nums) {
        int min=nums[0];
		//if it's already sorted then the min value is at index 0
        for(int i =0;i<nums.size()-1;i++){
             if(min>nums[i+1]){
				 min = nums[i+1];
                 break;
				//if we encounter a number smaller than the first number, stop the loop, that's the answer
			 }
        }
        return min;
        
        
        // using binary search
        
        class Solution {
public:
    int findMin(vector<int>& nums) {
           sort(nums.begin(),nums.end());
            int target=nums[0];
         int beg=0,end=nums.size()-1,mid;
            while(beg<=end)
            {
                    mid=(beg+end)/2 ;
                    
                  if(nums[mid]==target)
                  {
                          return nums[mid];
                  }
                  if(nums[mid]>=nums[beg])
                  {
                     if(target>=nums[beg] && target<=nums[mid])
                          end=mid-1;
                        else
                          beg=mid+1;
                  }
                    else
                    {
                            if(target<=nums[end] && target>=nums[mid])
                                    beg=mid+1;
                            else
                                    end=mid-1;
                    }
            }
            return -1;
            
    }
};
